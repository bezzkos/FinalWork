@using KnowSysTest.Common
@using KnowSysTest.Entities
@using KnowSysTest.PL.WebUI.Helpers
@using KnowSysTest.PL.WebUI.ViewModels

@{
    Page.Title = "Add Question";
    var test = new TestDTO();

    if (IsAjax)
    {
        Layout = "~/_LayoutModal.cshtml";

        if (!User.Identity.IsAuthenticated)
        {
            Response.Redirect(string.Format("~/Pages/Users/Login.cshtml?backUrl={0}&moDAL=1", Request.CurrentExecutionFilePath));
            Log.For(this).WarnFormat("Unauthorized access attempt - {0}", Request.CurrentExecutionFilePath);
            return;
        }

        if (Request["Id"] == null)
        {
            Response.SetStatus(HttpStatusCode.NotFound);
            Log.For(this).WarnFormat("Incorrect input parameter: Id = {0}", Request["Id"]);
            return;
        }
        try
        {
            test = Providers.TestBll.GetTest(Guid.Parse(Request["Id"]));
        }
        catch (Exception e)
        {
            Response.SetStatus(HttpStatusCode.NotFound);
            Log.For(this).ErrorFormat("An error occured while test build: Id = {0}, message: {1}", Request["Id"], e);
            return;
        }
    }

    if (IsPost)
    {
        var testIdAsString = Request["TestId"];
        var questionSelf = Request["Question"];
        var isRequired = Request["IsRequired"];
        var isMultiple = Request["IsMultiple"];
        var isActive = false;
        var categoryFk = Request["CategoryFk"];

        if (!string.IsNullOrWhiteSpace(questionSelf))
        {
            Guid testId;
            try
            {
                testId = Guid.Parse(testIdAsString);
            }
            catch (Exception e)
            {
                Log.For(this).ErrorFormat("An error occured while test build: Id = {0}, message: {1}", Request["Id"], e);
                return;
            }
            var question = new QuestionVM(questionSelf, isActive, isRequired != null, isMultiple != null, testId);
            var result = Providers.QuestionBll.CreateQuestion(question);

            if (result)
            {
                Response.Redirect(string.Format("~/Pages/Tests/ViewAllInCategory.cshtml?backUrl={0}&categoryId={1}", Request.CurrentExecutionFilePath, categoryFk));
            }
        }
    }
}

<div class="row">
    <div class="col-xs-12">
        <form action="~/Pages/Tests/AddQuestion.cshtml" id="OnValidate" method="post">
            <div class="form-group">
                <label class="required" for="inputQuestion">Question</label>
                <textarea class="form-control" id="inputQuestion" name="Question" placeholder="Input question here"></textarea>
            </div>
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" id="IsRequired" name="IsRequired" value="true"> Is Required?
                        </label>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" id="IsMultiple" name="IsMultiple" value="true"> Is Multiple?
                        </label>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <input type="text" class="form-control hidden" name="TestId" value="@test.Id">
            </div>
            <div class="form-group">
                <input type="text" class="form-control hidden" name="CategoryFk" value="@test.CategoryFk">
            </div>
            <button type="submit" class="btn btn-default">Done!</button>
        </form>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/validateCommonSimpleForms.js"></script>
}